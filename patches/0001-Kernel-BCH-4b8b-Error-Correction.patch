From 6acc0b12e05f69e7ac9e76bb237648c7d2fc1d37 Mon Sep 17 00:00:00 2001
From: Greg Guyotte <gguyotte@ti.com>
Date: Mon, 23 Aug 2010 16:27:13 -0500
Subject: [PATCH] Kernel BCH 4b8b Error Correction

* You must choose 1bit ECC, 4bit BCH, or 8bit BCH at compile time.
* To change ECC mode, you must modify omap2.c and uncomment
either CONFIG_MTD_NAND_OMAP_BCH_8 (for 8 bit correction), or
CONFIG_MTD_NAND_OMAP_BCH_4 (for 4 bit correction).  The default
is 1 bit ECC correction.

Signed-off-by: Greg Guyotte <gguyotte@ti.com>
---
 drivers/mtd/nand/Makefile           |    1 +
 drivers/mtd/nand/omap2.c            |  337 +++++++++++++++++++++++++++---
 drivers/mtd/nand/omap_bch_decoder.c |  399 +++++++++++++++++++++++++++++++++++
 3 files changed, 710 insertions(+), 27 deletions(-)
 create mode 100644 drivers/mtd/nand/omap_bch_decoder.c

diff --git a/drivers/mtd/nand/Makefile b/drivers/mtd/nand/Makefile
index 6950d3d..d109755 100644
--- a/drivers/mtd/nand/Makefile
+++ b/drivers/mtd/nand/Makefile
@@ -26,6 +26,7 @@ obj-$(CONFIG_MTD_NAND_NDFC)		+= ndfc.o
 obj-$(CONFIG_MTD_NAND_ATMEL)		+= atmel_nand.o
 obj-$(CONFIG_MTD_NAND_GPIO)		+= gpio.o
 obj-$(CONFIG_MTD_NAND_OMAP2) 		+= omap2.o
+obj-$(CONFIG_MTD_NAND_OMAP2) 		+= omap_bch_decoder.o
 obj-$(CONFIG_MTD_NAND_CM_X270)		+= cmx270_nand.o
 obj-$(CONFIG_MTD_NAND_BASLER_EXCITE)	+= excite_nandflash.o
 obj-$(CONFIG_MTD_NAND_PXA3xx)		+= pxa3xx_nand.o
diff --git a/drivers/mtd/nand/omap2.c b/drivers/mtd/nand/omap2.c
index 08c193c..45b2765 100644
--- a/drivers/mtd/nand/omap2.c
+++ b/drivers/mtd/nand/omap2.c
@@ -1,7 +1,9 @@
 /*
- * Copyright © 2004 Texas Instruments, Jian Zhang <jzhang@ti.com>
- * Copyright © 2004 Micron Technology Inc.
- * Copyright © 2004 David Brownell
+ * drivers/mtd/nand/omap2.c
+ *
+ * Copyright (c) 2004 Texas Instruments, Jian Zhang <jzhang@ti.com>
+ * Copyright (c) 2004 Micron Technology Inc.
+ * Copyright (c) 2004 David Brownell
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -15,6 +17,7 @@
 #include <linux/sched.h>
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/nand.h>
+#include <linux/mtd/nand_ecc.h>
 #include <linux/mtd/partitions.h>
 #include <linux/io.h>
 
@@ -22,6 +25,13 @@
 #include <plat/gpmc.h>
 #include <plat/nand.h>
 
+#define CONFIG_MTD_NAND_OMAP_HWECC
+#define GPMC_ECC_BCH_RESULT_0   0x240
+//#define CONFIG_MTD_NAND_OMAP_BCH_8
+#define CONFIG_MTD_NAND_OMAP_BCH_4
+static int omap_calculate_ecc(struct mtd_info *mtd, const u_char *, u_char *);
+int decode_bch(int select_4_8, unsigned char *ecc, unsigned int *err_loc);
+
 #define GPMC_IRQ_STATUS		0x18
 #define GPMC_ECC_CONFIG		0x1F4
 #define GPMC_ECC_CONTROL	0x1F8
@@ -33,6 +43,7 @@
 /* size (4 KiB) for IO mapping */
 #define	NAND_IO_SIZE	SZ_4K
 
+#define	NAND_WP_ON	1
 #define	NAND_WP_OFF	0
 #define NAND_WP_BIT	0x00000010
 #define WR_RD_PIN_MONITORING	0x00600000
@@ -149,8 +160,53 @@ struct omap_nand_info {
 	int				dma_ch;
 };
 
+
+/* Define some generic bad / good block scan pattern which are used
+ * while scanning a device for factory marked good / bad blocks
+ */
+static uint8_t scan_ff_pattern[] = { 0xff };
+static struct nand_bbt_descr bb_descrip_flashbased = {
+	.options = NAND_BBT_SCANEMPTY | NAND_BBT_SCANALLPAGES,
+	.offs = 0,
+	.len = 1,
+	.pattern = scan_ff_pattern,
+};
+
+/* bus_width : 0 for x8, 1 for x16 */
+static struct nand_ecclayout nand_oob;
+struct nand_ecclayout *get_ecc_layout(int bus_width)
+{
+	int offset, ecc_romcode = 0;
+	int i;
+
+	offset = (bus_width == 0) ? 1 : 2;
+#ifdef CONFIG_MTD_NAND_OMAP_BCH_8
+	nand_oob.eccbytes = 13*4;
+#elif defined(CONFIG_MTD_NAND_OMAP_BCH_4)
+	nand_oob.eccbytes = 7*4;
+#else
+	/* hamming code */
+	nand_oob.eccbytes = 3*4;
+#endif
+	if (!ecc_romcode)
+		offset = (64 - nand_oob.eccbytes);
+	else
+		offset = (bus_width == 0) ? 1 : 2;
+
+	for (i = 0; i < nand_oob.eccbytes; i++)
+		nand_oob.eccpos[i] = i + offset;
+
+	offset = (bus_width == 0) ? 1 : 2;
+	nand_oob.oobfree->offset =
+		(ecc_romcode ? (nand_oob.eccbytes + offset) : offset);
+	nand_oob.oobfree->length = 64 - (nand_oob.eccbytes + offset);
+
+	return &nand_oob;
+};
+
 /**
- * omap_nand_wp - This function enable or disable the Write Protect feature
+ * omap_nand_wp - This function enable or disable the Write Protect feature on
+ * NAND device
  * @mtd: MTD device structure
  * @mode: WP ON/OFF
  */
@@ -184,6 +240,7 @@ static void omap_hwcontrol(struct mtd_info *mtd, int cmd, unsigned int ctrl)
 {
 	struct omap_nand_info *info = container_of(mtd,
 					struct omap_nand_info, mtd);
+
 	switch (ctrl) {
 	case NAND_CTRL_CHANGE | NAND_CTRL_CLE:
 		info->nand.IO_ADDR_W = info->gpmc_cs_baseaddr +
@@ -234,12 +291,13 @@ static void omap_write_buf8(struct mtd_info *mtd, const u_char *buf, int len)
 {
 	struct omap_nand_info *info = container_of(mtd,
 						struct omap_nand_info, mtd);
+
 	u_char *p = (u_char *)buf;
 
 	while (len--) {
 		iowrite8(*p++, info->nand.IO_ADDR_W);
 		while (GPMC_BUF_EMPTY == (readl(info->gpmc_baseaddr +
-						GPMC_STATUS) & GPMC_BUF_FULL));
+					GPMC_STATUS) & GPMC_BUF_FULL));
 	}
 }
 
@@ -266,6 +324,7 @@ static void omap_write_buf16(struct mtd_info *mtd, const u_char * buf, int len)
 {
 	struct omap_nand_info *info = container_of(mtd,
 						struct omap_nand_info, mtd);
+
 	u16 *p = (u16 *) buf;
 
 	/* FIXME try bursts of writesw() or DMA ... */
@@ -275,8 +334,7 @@ static void omap_write_buf16(struct mtd_info *mtd, const u_char * buf, int len)
 		iowrite16(*p++, info->nand.IO_ADDR_W);
 
 		while (GPMC_BUF_EMPTY == (readl(info->gpmc_baseaddr +
-						GPMC_STATUS) & GPMC_BUF_FULL))
-			;
+						GPMC_STATUS) & GPMC_BUF_FULL));
 	}
 }
 
@@ -336,6 +394,7 @@ static void omap_write_buf_pref(struct mtd_info *mtd,
 						struct omap_nand_info, mtd);
 	uint32_t pfpw_status = 0, w_count = 0;
 	int i = 0, ret = 0;
+
 	u16 *p = (u16 *) buf;
 
 	/* take care of subpage writes */
@@ -521,7 +580,9 @@ static int omap_verify_buf(struct mtd_info *mtd, const u_char * buf, int len)
 	u16 *p = (u16 *) buf;
 
 	len >>= 1;
+
 	while (len--) {
+
 		if (*p++ != cpu_to_le16(readw(info->nand.IO_ADDR_R)))
 			return -EFAULT;
 	}
@@ -540,7 +601,11 @@ static void omap_hwecc_init(struct mtd_info *mtd)
 							mtd);
 	struct nand_chip *chip = mtd->priv;
 	unsigned long val = 0x0;
-
+#if defined(CONFIG_MTD_NAND_OMAP_BCH_8) || defined(CONFIG_MTD_NAND_OMAP_BCH_4)
+	/* Clear all ECC | Enable Reg1 */
+	val = ((0x00000001<<8) | 0x00000001);
+	__raw_writel(val, info->gpmc_baseaddr + GPMC_ECC_CONTROL);
+#else
 	/* Read from ECC Control Register */
 	val = __raw_readl(info->gpmc_baseaddr + GPMC_ECC_CONTROL);
 	/* Clear all ECC | Enable Reg1 */
@@ -552,28 +617,38 @@ static void omap_hwecc_init(struct mtd_info *mtd)
 	/* ECCSIZE1=512 | Select eccResultsize[0-3] */
 	val = ((((chip->ecc.size >> 1) - 1) << 22) | (0x0000000F));
 	__raw_writel(val, info->gpmc_baseaddr + GPMC_ECC_SIZE_CONFIG);
+#endif
 }
 
 /**
- * gen_true_ecc - This function will generate true ECC value
+ * gen_true_ecc - This function will generate true ECC value, which can be used
+ * when correcting data read from NAND flash memory core
  * @ecc_buf: buffer to store ecc code
- *
- * This generated true ECC value can be used when correcting
- * data read from NAND flash memory core
  */
 static void gen_true_ecc(u8 *ecc_buf)
 {
 	u32 tmp = ecc_buf[0] | (ecc_buf[1] << 16) |
 		((ecc_buf[2] & 0xF0) << 20) | ((ecc_buf[2] & 0x0F) << 8);
 
+#ifdef CONFIG_MTD_NAND_ECC_SMC
 	ecc_buf[0] = ~(P64o(tmp) | P64e(tmp) | P32o(tmp) | P32e(tmp) |
 			P16o(tmp) | P16e(tmp) | P8o(tmp) | P8e(tmp));
 	ecc_buf[1] = ~(P1024o(tmp) | P1024e(tmp) | P512o(tmp) | P512e(tmp) |
 			P256o(tmp) | P256e(tmp) | P128o(tmp) | P128e(tmp));
+#else
+	ecc_buf[0] = ~(P1024o(tmp) | P1024e(tmp) | P512o(tmp) | P512e(tmp) |
+			P256o(tmp) | P256e(tmp) | P128o(tmp) | P128e(tmp));
+	ecc_buf[1] = ~(P64o(tmp) | P64e(tmp) | P32o(tmp) | P32e(tmp) |
+			P16o(tmp) | P16e(tmp) | P8o(tmp) | P8e(tmp));
+#endif
 	ecc_buf[2] = ~(P4o(tmp) | P4e(tmp) | P2o(tmp) | P2e(tmp) | P1o(tmp) |
 			P1e(tmp) | P2048o(tmp) | P2048e(tmp));
 }
 
+
+
+
+
 /**
  * omap_compare_ecc - Detect (2 bits) and correct (1 bit) error in data
  * @ecc_data1:  ecc code from nand spare area
@@ -584,8 +659,8 @@ static void gen_true_ecc(u8 *ecc_buf)
  * If the error can be corrected it will be corrected to the buffer.
  */
 static int omap_compare_ecc(u8 *ecc_data1,	/* read from NAND memory */
-			    u8 *ecc_data2,	/* read from register */
-			    u8 *page_data)
+				u8 *ecc_data2,	/* read from register */
+				u8 *page_data)
 {
 	uint	i;
 	u8	tmp0_bit[8], tmp1_bit[8], tmp2_bit[8];
@@ -687,7 +762,7 @@ static int omap_compare_ecc(u8 *ecc_data1,	/* read from NAND memory */
 
 		page_data[find_byte] ^= (1 << find_bit);
 
-		return 0;
+		return 1;
 	default:
 		if (isEccFF) {
 			if (ecc_data2[0] == 0 &&
@@ -716,7 +791,9 @@ static int omap_correct_data(struct mtd_info *mtd, u_char *dat,
 {
 	struct omap_nand_info *info = container_of(mtd, struct omap_nand_info,
 							mtd);
-	int blockCnt = 0, i = 0, ret = 0;
+	int blockCnt = 0, i = 0, corrected = 0, ret = 0;
+	int j, eccsize, eccbits, eccflag, count;
+	unsigned int err_loc[8];
 
 	/* Ex NAND_ECC_HW12_2048 */
 	if ((info->nand.ecc.mode == NAND_ECC_HW) &&
@@ -725,19 +802,69 @@ static int omap_correct_data(struct mtd_info *mtd, u_char *dat,
 	else
 		blockCnt = 1;
 
+#if defined(CONFIG_MTD_NAND_OMAP_BCH_8)
+	eccsize = 13;
+	eccbits = 104;
+#elif defined(CONFIG_MTD_NAND_OMAP_BCH_4)
+	eccsize = 7;
+	eccbits = 52;
+#endif
+
+#if defined(CONFIG_MTD_NAND_OMAP_BCH_8) || defined(CONFIG_MTD_NAND_OMAP_BCH_4)
+	omap_calculate_ecc(mtd, dat, calc_ecc);
+	for (i = 0; i < blockCnt; i++) {
+		/* check if any ecc error */
+		eccflag = 0;
+		for (j = 0; (j < eccsize) && (eccflag == 0); j++)
+			if (calc_ecc[j] != 0)
+				eccflag = 1;
+
+		if (eccflag == 1) {
+			eccflag = 0;
+			for (j = 0; (j < eccsize) && (eccflag == 0); j++)
+				if (read_ecc[j] != 0xFF)
+					eccflag = 1;
+		}
+
+		if (eccflag == 1) {
+			printk(KERN_INFO "...bch correct(%d 512 byte)\n", i+1);
+#if defined(CONFIG_MTD_NAND_OMAP_BCH_8)
+			count = decode_bch(1, calc_ecc, err_loc);
+#else
+			count = decode_bch(0, calc_ecc, err_loc);
+#endif
+			corrected += count;
+			for (j = 0; j < count; j++) {
+				if (err_loc[j] < 4096)
+					dat[err_loc[j] >> 3] ^=
+							1 << (err_loc[j] & 7);
+				/* else, not interested to correct ecc */
+			}
+
+		}
+
+		calc_ecc = calc_ecc + eccsize;
+		read_ecc = read_ecc + eccsize;
+		dat += 512;
+	}
+#else
 	for (i = 0; i < blockCnt; i++) {
 		if (memcmp(read_ecc, calc_ecc, 3) != 0) {
 			ret = omap_compare_ecc(read_ecc, calc_ecc, dat);
 			if (ret < 0)
 				return ret;
+			if (ret > 0)
+				corrected++;
 		}
 		read_ecc += 3;
 		calc_ecc += 3;
 		dat      += 512;
 	}
-	return 0;
+#endif
+	return corrected;
 }
 
+
 /**
  * omap_calcuate_ecc - Generate non-inverted ECC bytes.
  * @mtd: MTD device structure
@@ -758,6 +885,55 @@ static int omap_calculate_ecc(struct mtd_info *mtd, const u_char *dat,
 	unsigned long val = 0x0;
 	unsigned long reg;
 
+    unsigned long val1 = 0x0, val2 = 0x0;
+    unsigned long val3 = 0x0, val4 = 0x0;
+	int i;
+#ifdef CONFIG_MTD_NAND_OMAP_BCH_8
+	for (i = 0; i < info->nand.ecc.size/512; i++) {
+		/* Reading HW ECC_BCH_Results
+		 * 0x240-0x24C, 0x250-0x25C, 0x260-0x26C, 0x270-0x27C
+		 */
+		reg = (unsigned long)(info->gpmc_baseaddr +
+					GPMC_ECC_BCH_RESULT_0 + (0x10 * i));
+		val1 = __raw_readl(reg);
+		val2 = __raw_readl(reg + 4);
+		val3 = __raw_readl(reg + 8);
+		val4 = __raw_readl(reg + 12);
+
+		*ecc_code++ = (val4 & 0xFF);
+		*ecc_code++ = ((val3 >> 24) & 0xFF);
+		*ecc_code++ = ((val3 >> 16) & 0xFF);
+		*ecc_code++ = ((val3 >> 8) & 0xFF);
+		*ecc_code++ = (val3 & 0xFF);
+		*ecc_code++ = ((val2 >> 24) & 0xFF);
+
+		*ecc_code++ = ((val2 >> 16) & 0xFF);
+		*ecc_code++ = ((val2 >> 8) & 0xFF);
+		*ecc_code++ = (val2 & 0xFF);
+		*ecc_code++ = ((val1 >> 24) & 0xFF);
+		*ecc_code++ = ((val1 >> 16) & 0xFF);
+		*ecc_code++ = ((val1 >> 8) & 0xFF);
+		*ecc_code++ = (val1 & 0xFF);
+	}
+#elif defined(CONFIG_MTD_NAND_OMAP_BCH_4)
+	for (i = 0; i < info->nand.ecc.size/512; i++) {
+		/* Reading HW ECC_BCH_Results
+		 * 0x240-0x24C, 0x250-0x25C, 0x260-0x26C, 0x270-0x27C
+		 */
+		reg = (unsigned long)(info->gpmc_baseaddr +
+				GPMC_ECC_BCH_RESULT_0 + (0x10 * i));
+		val1 = __raw_readl(reg);
+		val2 = __raw_readl(reg + 4);
+
+		*ecc_code++ = ((val2 >> 16) & 0xFF);
+		*ecc_code++ = ((val2 >> 8) & 0xFF);
+		*ecc_code++ = (val2 & 0xFF);
+		*ecc_code++ = ((val1 >> 24) & 0xFF);
+		*ecc_code++ = ((val1 >> 16) & 0xFF);
+		*ecc_code++ = ((val1 >> 8) & 0xFF);
+		*ecc_code++ = (val1 & 0xFF);
+	}
+#else
 	/* Start Reading from HW ECC1_Result = 0x200 */
 	reg = (unsigned long)(info->gpmc_baseaddr + GPMC_ECC1_RESULT);
 	val = __raw_readl(reg);
@@ -766,10 +942,12 @@ static int omap_calculate_ecc(struct mtd_info *mtd, const u_char *dat,
 	/* P2048o, P1024o, P512o, P256o, P2048e, P1024e, P512e, P256e */
 	*ecc_code++ = ((val >> 8) & 0x0f) | ((val >> 20) & 0xf0);
 	reg += 4;
-
+#endif
 	return 0;
 }
 
+
+
 /**
  * omap_enable_hwecc - This function enables the hardware ecc functionality
  * @mtd: MTD device structure
@@ -783,32 +961,91 @@ static void omap_enable_hwecc(struct mtd_info *mtd, int mode)
 	unsigned int dev_width = (chip->options & NAND_BUSWIDTH_16) ? 1 : 0;
 	unsigned long val = __raw_readl(info->gpmc_baseaddr + GPMC_ECC_CONFIG);
 
+	unsigned int bch_mod, eccsize1, eccsize0;
+	unsigned int ecc_conf_val = 0, ecc_size_conf_val = 0;
+
+#if defined(CONFIG_MTD_NAND_OMAP_BCH_8)
+	bch_mod = 1;
+#elif defined(CONFIG_MTD_NAND_OMAP_BCH_4)
+	bch_mod = 0;
+#endif
+
 	switch (mode) {
-	case NAND_ECC_READ:
+	case NAND_ECC_READ    :
+#if defined(CONFIG_MTD_NAND_OMAP_BCH_8)
+		eccsize1 = 0x1A; eccsize0 = 0x18;
+		/* ECCSIZE1=26 | ECCSIZE0=12 */
+		ecc_size_conf_val = (eccsize1 << 22) | (eccsize0 << 12);
+
+		/* ECCALGORITHM | ECCBCHT8 | ECCWRAPMODE | ECC16B |
+		* ECCTOPSECTOR | ECCCS | ECC Enable
+		*/
+		ecc_conf_val = ((0x01 << 16) | (bch_mod << 12) | (0x04 << 8) |
+				(dev_width << 7) | (0x03 << 4) |
+				(info->gpmc_cs << 1) | (0x1));
+
+#elif defined(CONFIG_MTD_NAND_OMAP_BCH_4)
+		eccsize1 = 0xD; eccsize0 = 0x48;
+		/* ECCSIZE1=26 | ECCSIZE0=12 */
+		ecc_size_conf_val = (eccsize1 << 22) | (eccsize0 << 12);
+
+		/* ECCALGORITHM | ECCBCHT8 | ECCWRAPMODE | ECC16B |
+		* ECCTOPSECTOR | ECCCS | ECC Enable
+		*/
+		ecc_conf_val = ((0x01 << 16) | (bch_mod << 12) | (0x09 << 8) |
+				(dev_width << 7) | (0x03 << 4) |
+				(info->gpmc_cs << 1) | (0x1));
+#else
 		__raw_writel(0x101, info->gpmc_baseaddr + GPMC_ECC_CONTROL);
 		/* (ECC 16 or 8 bit col) | ( CS  )  | ECC Enable */
 		val = (dev_width << 7) | (info->gpmc_cs << 1) | (0x1);
+#endif
 		break;
-	case NAND_ECC_READSYN:
+
+	case NAND_ECC_READSYN :
 		 __raw_writel(0x100, info->gpmc_baseaddr + GPMC_ECC_CONTROL);
 		/* (ECC 16 or 8 bit col) | ( CS  )  | ECC Enable */
 		val = (dev_width << 7) | (info->gpmc_cs << 1) | (0x1);
 		break;
-	case NAND_ECC_WRITE:
+
+	case NAND_ECC_WRITE   :
+		eccsize1 = 0x20; eccsize0 = 0x00;
+#if defined(CONFIG_MTD_NAND_OMAP_BCH_8) || defined(CONFIG_MTD_NAND_OMAP_BCH_4)
+		/* ECCSIZE1=32 | ECCSIZE0=00 */
+		ecc_size_conf_val = (eccsize1 << 22) | (eccsize0 << 12);
+
+		/* ECCALGORITHM | ECCBCHT8 | ECCWRAPMODE | ECC16B |
+		 * ECCTOPSECTOR | ECCCS | ECC Enable
+		 */
+		ecc_conf_val = ((0x01 << 16) | (bch_mod << 12) | (0x06 << 8) |
+				(dev_width << 7) | (0x03 << 4) |
+				(info->gpmc_cs << 1) | (0x1));
+#else
 		__raw_writel(0x101, info->gpmc_baseaddr + GPMC_ECC_CONTROL);
 		/* (ECC 16 or 8 bit col) | ( CS  )  | ECC Enable */
 		val = (dev_width << 7) | (info->gpmc_cs << 1) | (0x1);
+#endif
 		break;
+
 	default:
 		DEBUG(MTD_DEBUG_LEVEL0, "Error: Unrecognized Mode[%d]!\n",
 					mode);
 		break;
 	}
 
+#if defined(CONFIG_MTD_NAND_OMAP_BCH_8) || defined(CONFIG_MTD_NAND_OMAP_BCH_4)
+	__raw_writel(0x00000001,  info->gpmc_baseaddr + GPMC_ECC_CONTROL);
+	__raw_writel(ecc_size_conf_val,
+				info->gpmc_baseaddr + GPMC_ECC_SIZE_CONFIG);
+	__raw_writel(ecc_conf_val, info->gpmc_baseaddr + GPMC_ECC_CONFIG);
+	__raw_writel(0x00000101,  info->gpmc_baseaddr + GPMC_ECC_CONTROL);
+#else
 	__raw_writel(val, info->gpmc_baseaddr + GPMC_ECC_CONFIG);
+#endif
 }
 #endif
 
+
 /**
  * omap_wait - wait until the command is done
  * @mtd: MTD device structure
@@ -849,6 +1086,8 @@ static int omap_wait(struct mtd_info *mtd, struct nand_chip *chip)
 	return status;
 }
 
+
+ 
 /**
  * omap_dev_ready - calls the platform specific dev_ready function
  * @mtd: MTD device structure
@@ -983,9 +1222,9 @@ static int __devinit omap_nand_probe(struct platform_device *pdev)
 					" Non-dma data transfer mode\n");
 			} else {
 				omap_set_dma_dest_burst_mode(info->dma_ch,
-						OMAP_DMA_DATA_BURST_16);
+					OMAP_DMA_DATA_BURST_16);
 				omap_set_dma_src_burst_mode(info->dma_ch,
-						OMAP_DMA_DATA_BURST_16);
+					OMAP_DMA_DATA_BURST_16);
 
 				info->nand.read_buf   = omap_read_buf_dma_pref;
 				info->nand.write_buf  = omap_write_buf_dma_pref;
@@ -1003,8 +1242,23 @@ static int __devinit omap_nand_probe(struct platform_device *pdev)
 	info->nand.verify_buf = omap_verify_buf;
 
 #ifdef CONFIG_MTD_NAND_OMAP_HWECC
-	info->nand.ecc.bytes		= 3;
-	info->nand.ecc.size		= 512;
+	if (info->nand.options & NAND_BUSWIDTH_16) {
+			info->nand.ecc.layout = get_ecc_layout(1);
+		} else {
+			info->nand.ecc.layout = get_ecc_layout(0);
+			info->nand.badblock_pattern = &bb_descrip_flashbased;
+		}
+
+#ifdef CONFIG_MTD_NAND_OMAP_BCH_8
+		info->nand.ecc.bytes		= 52;
+		info->nand.ecc.size		= 2048;
+#elif defined(CONFIG_MTD_NAND_OMAP_BCH_4)
+		info->nand.ecc.bytes		= 28;
+		info->nand.ecc.size		= 2048;
+#else
+		info->nand.ecc.bytes		= 3;
+		info->nand.ecc.size		= 512;
+#endif
 	info->nand.ecc.calculate	= omap_calculate_ecc;
 	info->nand.ecc.hwctl		= omap_enable_hwecc;
 	info->nand.ecc.correct		= omap_correct_data;
@@ -1067,6 +1321,33 @@ static int omap_nand_remove(struct platform_device *pdev)
 	return 0;
 }
 
+#ifdef CONFIG_PM
+static int omap_nand_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	struct mtd_info *info = platform_get_drvdata(pdev);
+	int ret = 0;
+
+	if (info && info->suspend)
+		ret = info->suspend(info);
+
+	return ret;
+}
+static int omap_nand_resume(struct platform_device *pdev)
+{
+	struct mtd_info *info = platform_get_drvdata(pdev);
+	int ret = 0;
+
+	if (info)
+		info->resume(info);
+
+	return ret;
+}
+
+#else
+# define omap_nand_suspend   NULL
+# define omap_nand_resume    NULL
+#endif                          /* CONFIG_PM */
+
 static struct platform_driver omap_nand_driver = {
 	.probe		= omap_nand_probe,
 	.remove		= omap_nand_remove,
@@ -1074,6 +1355,8 @@ static struct platform_driver omap_nand_driver = {
 		.name	= DRIVER_NAME,
 		.owner	= THIS_MODULE,
 	},
+	.suspend	= omap_nand_suspend,
+	.resume		= omap_nand_resume,
 };
 
 static int __init omap_nand_init(void)
@@ -1085,8 +1368,8 @@ static int __init omap_nand_init(void)
 	 */
 	if ((1 == use_dma) && (0 == use_prefetch)) {
 		printk(KERN_INFO"Wrong parameters: 'use_dma' can not be 1 "
-				"without use_prefetch'. Prefetch will not be"
-				" used in either mode (mpu or dma)\n");
+			"without use_prefetch'. Prefetch will not be"
+			" used in either mode (mpu or dma)\n");
 	}
 	return platform_driver_register(&omap_nand_driver);
 }
diff --git a/drivers/mtd/nand/omap_bch_decoder.c b/drivers/mtd/nand/omap_bch_decoder.c
new file mode 100644
index 0000000..8149461
--- /dev/null
+++ b/drivers/mtd/nand/omap_bch_decoder.c
@@ -0,0 +1,399 @@
+/*
+ * drivers/mtd/nand/omap_bch_decoder.c
+ *
+ * Whole BCH ECC Decoder (Post hardware generated syndrome decoding)
+ *
+ * Copyright (c) 2007 Texas Instruments
+ *
+ * Author: Sukumar Ghorai <s-ghorai@ti.com
+ *		   Michael Fillinger <m-fillinger@ti.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ */
+ 
+#include <linux/kernel.h>
+#include <linux/module.h>
+#define printk //printf
+
+#define mm		13
+#define kk_shorten	4096
+#define nn		8191	/* Length of codeword, n = 2**mm - 1 */
+
+#define PPP	0x201B	/* Primary Polynomial : x^13 + x^4 + x^3 + x + 1 */
+#define P	0x001B	/* With omitted x^13 */
+#define POLY	12	/* degree of the primary Polynomial less one */
+
+/**
+ * mpy_mod_gf - GALOIS field multiplier
+ * Input  : A(x), B(x)
+ * Output : A(x)*B(x) mod P(x)
+ */
+static unsigned int mpy_mod_gf(unsigned int a, unsigned int b)
+{
+	unsigned int R = 0;
+	unsigned int R1 = 0;
+	unsigned int k = 0;
+
+	for (k = 0; k < mm; k++) {
+
+		R = (R << 1) & 0x1FFE;
+		if (R1 == 1)
+			R ^= P;
+
+		if (((a >> (POLY - k)) & 1) == 1)
+			R ^= b;
+
+		if (k < POLY)
+			R1 = (R >> POLY) & 1;
+	}
+	return R;
+}
+
+/**
+ * chien - CHIEN search
+ *
+ * @location - Error location vector pointer
+ *
+ * Inputs  : ELP(z)
+ *	     No. of found errors
+ *	     Size of input codeword
+ * Outputs : Up to 8 locations
+ *	     No. of errors
+ */
+static int chien(unsigned int select_4_8, int err_nums,
+				unsigned int err[], unsigned int *location)
+{
+	int i, count; /* Number of dectected errors */
+	/* Contains accumulation of evaluation at x^i (i:1->8) */
+	unsigned int gammas[8] = {0};
+	unsigned int alpha;
+	unsigned int bit, ecc_bits;
+	unsigned int elp_sum;
+
+	ecc_bits = (select_4_8 == 0) ? 52 : 104;
+	
+	/* Start evaluation at Alpha**8192 and decreasing */
+	for (i = 0; i < 8; i++)
+		gammas[i] = err[i];
+
+	count = 0;
+	for (i = 1; (i <= nn) && (count < err_nums); i++) {
+
+		/* Result of evaluation at root */
+		elp_sum = 1 ^ gammas[0] ^ gammas[1] ^
+				gammas[2] ^ gammas[3] ^
+				gammas[4] ^ gammas[5] ^
+				gammas[6] ^ gammas[7];
+
+		alpha = PPP >> 1;
+		gammas[0] = mpy_mod_gf(gammas[0], alpha);
+		alpha = mpy_mod_gf(alpha, (PPP >> 1));	/* x alphha^-2 */
+		gammas[1] = mpy_mod_gf(gammas[1], alpha);
+		alpha = mpy_mod_gf(alpha, (PPP >> 1));	/* x alphha^-2 */
+		gammas[2] = mpy_mod_gf(gammas[2], alpha);
+		alpha = mpy_mod_gf(alpha, (PPP >> 1));	/* x alphha^-3 */
+		gammas[3] = mpy_mod_gf(gammas[3], alpha);
+		alpha = mpy_mod_gf(alpha, (PPP >> 1));	/* x alphha^-4 */
+		gammas[4] = mpy_mod_gf(gammas[4], alpha);
+		alpha = mpy_mod_gf(alpha, (PPP >> 1));	/* x alphha^-5 */
+		gammas[5] = mpy_mod_gf(gammas[5], alpha);
+		alpha = mpy_mod_gf(alpha, (PPP >> 1));	/* x alphha^-6 */
+		gammas[6] = mpy_mod_gf(gammas[6], alpha);
+		alpha = mpy_mod_gf(alpha, (PPP >> 1));	/* x alphha^-7 */
+		gammas[7] = mpy_mod_gf(gammas[7], alpha);
+
+		if (elp_sum == 0) {
+			/* calculate location */
+			bit = ((i-1) & ~7)|(7-((i-1) & 7));
+			if ((select_4_8 == 0) && (i >= 2 * ecc_bits)) {
+				location[count++] = kk_shorten - (bit - 2 * ecc_bits) - 1;
+			} else if ((select_4_8 == 1) && (i >= 2 * ecc_bits)) {
+				location[count++] = kk_shorten - (bit - 2 * ecc_bits) - 1;
+			}
+		}
+	}
+
+	/* Failure: No. of detected errors != No. or corrected errors */
+	if (count != err_nums) {
+		count = -1;
+		printk(KERN_INFO "BCH decoding failed\n");
+	}
+	for (i = 0; i < count; i++)
+		printk(KERN_INFO "%d ", location[i]);
+
+	return count;
+}
+
+/* synd : 16 Syndromes
+ * return: gamaas - Coefficients to the error polynomial
+ * return: : Number of detected errors
+*/
+static unsigned int berlekamp(unsigned int select_4_8,
+			unsigned int synd[], unsigned int err[])
+{
+	int loop, iteration;
+	unsigned int LL = 0;		/* Detected errors */
+	unsigned int d = 0;	/* Distance between Syndromes and ELP[n](z) */
+	unsigned int invd = 0;		/* Inverse of d */
+	/* Intermediate ELP[n](z).
+	 * Final ELP[n](z) is Error Location Polynomial
+	 */
+	unsigned int gammas[16] = {0};
+	/* Intermediate normalized ELP[n](z) : D[n](z) */
+	unsigned int D[16] = {0};
+	/* Temporary value that holds an ELP[n](z) coefficient */
+	unsigned int next_gamma = 0;
+
+	int e = 0;
+	unsigned int sign = 0;
+	unsigned int u = 0;
+	unsigned int v = 0;
+	unsigned int C1 = 0, C2 = 0;
+	unsigned int ss = 0;
+	unsigned int tmp_v = 0, tmp_s = 0;
+	unsigned int tmp_poly;
+
+	/*-------------- Step 0 ------------------*/
+	for (loop = 0; loop < 16; loop++)
+		gammas[loop] = 0;
+	gammas[0] = 1;
+	D[1] = 1;
+
+	iteration = 0;
+	LL = 0;
+	while ((iteration < ((select_4_8+1)*2*4)) &&
+			(LL <= ((select_4_8+1)*4))) {
+
+		printk(KERN_INFO "\nIteration.............%d\n", iteration);
+		d = 0;
+		/* Step: 0 */
+		for (loop = 0; loop <= LL; loop++) {
+			tmp_poly = mpy_mod_gf(
+					gammas[loop], synd[iteration - loop]);
+			d ^= tmp_poly;
+			printk(KERN_INFO "%02d. s=0 LL=%x poly %x\n",
+					loop, LL, tmp_poly);
+		}
+
+		/* Step 1: 1 cycle only to perform inversion */
+		v = d << 1;
+		e = -1;
+		sign = 1;
+		ss = 0x2000;
+		invd = 0;
+		u = PPP;
+		for (loop = 0; (d != 0) && (loop <= (2 * POLY)); loop++) {
+			printk(KERN_INFO "%02d. s=1 LL=%x poly NULL\n",
+						loop, LL);
+			C1 = (v >> 13) & 1;
+			C2 = C1 & sign;
+
+			sign ^= C2 ^ (e == 0);
+
+			tmp_v = v;
+			tmp_s = ss;
+
+			if (C1 == 1) {
+				v ^= u;
+				ss ^= invd;
+			}
+			v = (v << 1) & 0x3FFF;
+			if (C2 == 1) {
+				u = tmp_v;
+				invd = tmp_s;
+				e = -e;
+			}
+			invd >>= 1;
+			e--;
+		}
+
+		for (loop = 0; (d != 0) && (loop <= (iteration + 1)); loop++) {
+			/* Step 2
+			 * Interleaved with Step 3, if L<(n-k)
+			 * invd: Update of ELP[n](z) = ELP[n-1](z) - d.D[n-1](z)
+			 */
+
+			/* Holds value of ELP coefficient until precedent
+			 * value does not have to be used anymore
+			 */
+			tmp_poly = mpy_mod_gf(d, D[loop]);
+			printk(KERN_INFO "%02d. s=2 LL=%x poly %x\n",
+						loop, LL, tmp_poly);
+
+			next_gamma = gammas[loop] ^ tmp_poly;
+			if ((2 * LL) < (iteration + 1)) {
+				/* Interleaving with Step 3
+				 * for parallelized update of ELP(z) and D(z)
+				 */
+			} else {
+				/* Update of ELP(z) only -> stay in Step 2 */
+				gammas[loop] = next_gamma;
+				if (loop == (iteration + 1)) {
+					/* to step 4 */
+					break;
+				}
+			}
+
+			/* Step 3
+			 * Always interleaved with Step 2 (case when L<(n-k))
+			 * Update of D[n-1](z) = ELP[n-1](z)/d
+			 */
+			D[loop] = mpy_mod_gf(gammas[loop], invd);
+			printk(KERN_INFO "%02d. s=3 LL=%x poly %x\n",
+					loop, LL, D[loop]);
+
+			/* Can safely update ELP[n](z) */
+			gammas[loop] = next_gamma;
+
+			if (loop == (iteration + 1)) {
+				/* If update finished */
+				LL = iteration - LL + 1;
+				/* to step 4 */
+				break;
+			}
+			/* Else, interleaving to step 2*/
+		}
+
+		/* Step 4: Update D(z): i:0->L */
+		/* Final update of D[n](z) = D[n](z).z*/
+		for (loop = 0; loop < 15; loop++) /* Left Shift */
+			D[15 - loop] = D[14 - loop];
+
+		D[0] = 0;
+
+		iteration++;
+	} /* while */
+
+	/* Processing finished, copy ELP to final registers : 0->2t-1*/
+	for (loop = 0; loop < 8; loop++)
+		err[loop] = gammas[loop+1];
+
+	printk(KERN_INFO "\n Err poly:");
+	for (loop = 0; loop < 8; loop++)
+		printk(KERN_INFO "0x%x ", err[loop]);
+
+	return LL;
+}
+
+/*
+ * syndrome - Generate syndrome components from hw generate syndrome
+ * r(x) = c(x) + e(x)
+ * s(x) = c(x) mod g(x) + e(x) mod g(x) =  e(x) mod g(x)
+ * so receiver checks if the syndrome s(x) = r(x) mod g(x) is equal to zero.
+ * unsigned int s[16]; - Syndromes
+ */
+static void syndrome(unsigned int select_4_8,
+					unsigned char *ecc, unsigned int syn[])
+{
+	unsigned int k, l, t;
+	unsigned int alpha_bit, R_bit;
+	int ecc_pos, ecc_min;
+
+	/* 2t-1 = 15 (for t=8) minimal polynomials of the first 15 powers of a
+	 * primitive elemmants of GF(m); Even powers minimal polynomials are
+	 * duplicate of odd powers' minimal polynomials.
+	 * Odd powers of alpha (1 to 15)
+	 */
+	unsigned int pow_alpha[8] = {0x0002, 0x0008, 0x0020, 0x0080,
+				 0x0200, 0x0800, 0x001B, 0x006C};
+
+	printk(KERN_INFO "\n ECC[0..n]: ");
+	for (k = 0; k < 13; k++)
+		printk(KERN_INFO "0x%x ", ecc[k]);
+
+	if (select_4_8 == 0) {
+		t = 4;
+		ecc_pos = 55; /* bits(52-bits): 55->4 */
+		ecc_min = 4;
+	} else {
+		t = 8;
+		ecc_pos = 103; /* bits: 103->0 */
+		ecc_min = 0;
+	}
+
+	/* total numbber of syndrom to be used is 2t */
+	/* Step1: calculate the odd syndrome(s) */
+	R_bit = ((ecc[ecc_pos/8] >> (7 - ecc_pos%8)) & 1);
+	ecc_pos--;
+	for (k = 0; k < t; k++)
+		syn[2 * k] = R_bit;
+
+	while (ecc_pos >= ecc_min) {
+		R_bit = ((ecc[ecc_pos/8] >> (7 - ecc_pos%8)) & 1);
+		ecc_pos--;
+
+		for (k = 0; k < t; k++) {
+			/* Accumulate value of x^i at alpha^(2k+1) */
+			if (R_bit == 1)
+				syn[2*k] ^= pow_alpha[k];
+
+			/* Compute a**(2k+1), using LSFR */
+			for (l = 0; l < (2 * k + 1); l++) {
+				alpha_bit = (pow_alpha[k] >> POLY) & 1;
+				pow_alpha[k] = (pow_alpha[k] << 1) & 0x1FFF;
+				if (alpha_bit == 1)
+					pow_alpha[k] ^= P;
+			}
+		}
+	}
+
+	/* Step2: calculate the even syndrome(s)
+	 * Compute S(a), where a is an even power of alpha
+	 * Evenry even power of primitive element has the same minimal
+	 * polynomial as some odd power of elemets.
+	 * And based on S(a^2) = S^2(a)
+	 */
+	for (k = 0; k < t; k++)
+		syn[2*k+1] = mpy_mod_gf(syn[k], syn[k]);
+
+	printk(KERN_INFO "\n Syndromes: ");
+	for (k = 0; k < 16; k++)
+		printk(KERN_INFO "0x%x ", syn[k]);
+}
+
+/**
+ * decode_bch - BCH decoder for 4- and 8-bit error correction
+ *
+ * @ecc - ECC syndrome generated by hw BCH engine
+ * @err_loc - pointer to error location array
+ *
+ * This function does post sydrome generation (hw generated) decoding
+ * for:-
+ * Dimension of Galoise Field: m = 13
+ * Length of codeword: n = 2**m - 1
+ * Number of errors that can be corrected: 4- or 8-bits
+ * Length of information bit: kk = nn - rr
+ */
+int decode_bch(int select_4_8, unsigned char *ecc, unsigned int *err_loc)
+{
+	int no_of_err;
+	unsigned int syn[16] = {0,};	/* 16 Syndromes */
+	unsigned int err_poly[8] = {0,};
+	/* Coefficients to the error polynomial
+	 * ELP(x) = 1 + err0.x + err1.x^2 + ... + err7.x^8
+	 */
+
+	/* Decoting involes three steps
+	 * 1. Compute the syndrom from teh received codeword,
+	 * 2. Find the error location polynomial from a set of equations
+	 *     derived from the syndrome,
+	 * 3. Use the error location polynomial to identify errants bits,
+	 *
+	 * And correcttion done by bit flips using error locaiton and expected
+	 * to be outseide of this implementation.
+	 */
+	syndrome(select_4_8, ecc, syn);
+	no_of_err = berlekamp(select_4_8, syn, err_poly);
+	if (no_of_err <= (4 << select_4_8))
+		no_of_err = chien(select_4_8, no_of_err, err_poly, err_loc);
+
+	return no_of_err;
+}
+EXPORT_SYMBOL(decode_bch);
-- 
1.7.0.4

